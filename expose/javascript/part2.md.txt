1. 3  
2. 150  
3. [50, 100, 150]  
4. Error, because `i` is block-scoped and not accessible outside the block.  
5. Error, because `let discountedPrice` is declared inside a block and cannot be accessed outside.  
6. Error, because `i` is out of scope.  
7. 150  
8. [50, 100, 150]  
9. Error, because `i` is not in scope.  
10. 3  
11. [50, 100, 150]

12:  
A. `student.name`  
B. `student["Grad Year"]`  
C. `student.greeting().name`  
D. `student["Favorite Teacher"].name`  
E. `student.courseLoad[0]`

13:  
A. 32 – due to string concatenation with the `+` operator  
B. 1 – because `+` converts operands to integers  
C. 3 – `null` is coerced to 0, and 3 + 0 = 3  
D. 3null – caused by string concatenation with `+`  
E. 4 – since `true` is converted to 1  
F. 0 – because both `false` and `null` are converted to 0  
G. `undefined` – due to concatenation with an undefined variable  
H. `NaN` – because `undefined` cannot be converted to a number

14:  
A. true – JavaScript converts both values to numbers  
B. false – dictionary (object) comparison doesn't match because references differ  
C. true – the string `'2'` is converted to number 2  
D. false – `true` and `1` are not the same type  
E. false – because `true` is not equal to `1` when using strict comparison  
F. true – `Boolean(2)` returns `true`

15. The `==` operator performs type coercion before comparison. The `===` operator compares both value and data type, so it only returns `true` when both match.
